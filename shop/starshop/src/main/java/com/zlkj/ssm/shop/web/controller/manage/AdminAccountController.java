package com.zlkj.ssm.shop.web.controller.manage;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import com.zlkj.ssm.shop.common.tools.MD5;import com.zlkj.ssm.shop.core.KeyValueHelper;import com.zlkj.ssm.shop.core.Services;import com.zlkj.ssm.shop.core.page.PagerModel;import com.zlkj.ssm.shop.manage.entity.Account;import com.zlkj.ssm.shop.manage.service.AdminAccountService;import com.zlkj.ssm.shop.web.controller.BaseController;import com.zlkj.ssm.shop.web.tools.RequestHolder;/** * 会员管理 */@Controller@RequestMapping("/manage/account/")public class AdminAccountController extends BaseController<Account> {	private static final Logger logger = LoggerFactory.getLogger(AdminAccountController.class);    @Autowired	private AdminAccountService accountService;    private static final String page_toList = "/manage/account/accountList";    private static final String page_freeze = "/manage/account/freeze";    private static final String page_show = "/manage/account/show";    private AdminAccountController(){        super.page_toList = page_toList;        super.page_toAdd = null;        super.page_toEdit = null;    }    @Override	protected void selectListAfter(PagerModel pager) {		pager.setPagerUrl("selectList");	}	public void setAccountService(AdminAccountService accountService) {		this.accountService = accountService;	}    @Override    public void insertAfter(Account e) {        e.clear();    }    @Override    public Services<Account> getService() {        return accountService;    }    @Override    @RequestMapping("toEdit")	public String toEdit(Account e, ModelMap model) throws Exception {        e = getService().selectOne(e);		getKeyValue(e);        model.addAttribute("e", e);		return page_toEdit;	}	/**	 * 根据键获取值	 */	private void getKeyValue(Account e) {		if(StringUtils.isNotBlank(e.getAccountType())){			e.setAccountTypeName(KeyValueHelper.get("account_accountType_"+e.getAccountType()));		}else{			e.setAccountTypeName("系统会员");		}		if(StringUtils.isNotBlank(e.getRank())){			e.setRankName(KeyValueHelper.get("account_rank_"+e.getRank()));		}	}		/**	 * 根据会员账号查询会员信息	 * @return	 * @throws Exception	 */    @RequestMapping("show")	public String show(Account e, ModelMap model) throws Exception {		String account = e.getAccount();		if(StringUtils.isBlank(account)){			throw new NullPointerException("账号不能为空！");		}		e.clear();  		e.setAccount(account);		e = getService().selectOne(e);		if(e==null){			throw new NullPointerException("系统查询不到账号为"+account+"的用户信息！");		}		getKeyValue(e);		model.addAttribute("e", e);		return page_show;	}		/**	 * 重置会员密码，发送重置好的密码到会员邮箱	 * @return	 * @throws Exception	 */    @RequestMapping(value = "show", method = RequestMethod.POST)	public String czmm(@RequestParam(required = false)String id) throws Exception{		Account acc = new Account();		acc.setId(id);		acc.setPassword(MD5.md5("111111"));		accountService.update(acc);		return selectList(RequestHolder.getRequest(), acc);	}		/**	 * 转到冻结页面	 * @return	 */    @RequestMapping(value = "toFreeze")	public String toFreeze(Account e, ModelMap model) throws Exception {		logger.error("AccountAction.toFreeze id = " + e.getId());		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException("参数不能为空");		}				e = accountService.selectById(e.getId());		if(e==null){			throw new NullPointerException("根据用户ID查询不到用户信息");		}        model.addAttribute("e", e);		return page_freeze;	}		/**	 * 冻结用户	 * @return	 * @throws Exception 	 */    @RequestMapping(value = "updateFreeze", method = RequestMethod.POST)	public String updateFreeze(@ModelAttribute("e") Account e) throws Exception {		logger.error("AccountAction.freeze id = " + e.getId());		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException("参数不能为空");		}				accountService.update(e);				e.clear();		return super.selectList(RequestHolder.getRequest(), e);	}    	}