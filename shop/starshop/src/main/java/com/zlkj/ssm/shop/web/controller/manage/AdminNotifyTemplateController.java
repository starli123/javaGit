package com.zlkj.ssm.shop.web.controller.manage;import static com.zlkj.ssm.shop.common.basic.Base.empty;import java.io.IOException;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import com.alibaba.fastjson.JSON;import com.zlkj.ssm.shop.common.tools.FreemarkerTemplateUtil;import com.zlkj.ssm.shop.manage.entity.NotifyTemplate;import com.zlkj.ssm.shop.manage.service.AdminNotifyTemplateService;import com.zlkj.ssm.shop.web.controller.BaseController;/** * 通知模板 */@Controller@RequestMapping("/manage/notifyTemplate/")@SuppressWarnings({"rawtypes","unchecked"})public class AdminNotifyTemplateController extends BaseController<NotifyTemplate> {	private static final Logger logger = LoggerFactory.getLogger(AdminNotifyTemplateController.class);	@Autowired	private AdminNotifyTemplateService notifyTemplateService;	private static final String page_toList = "/manage/notifyTemplate/notifyTemplateList";	private AdminNotifyTemplateController() {		super.page_toList = page_toList;		super.page_toAdd = null;		super.page_toEdit = null;	}		@Override	public AdminNotifyTemplateService getService() {		return notifyTemplateService;	}	public void setNotifyTemplateService(			AdminNotifyTemplateService notifyTemplateService) {		this.notifyTemplateService = notifyTemplateService;	}	public void insertAfter(NotifyTemplate e) {		e.clear();	}		@Override	public String selectList(HttpServletRequest request, @ModelAttribute("e") NotifyTemplate e) throws Exception {		super.initPageSelect();		List<NotifyTemplate> notifyTemplateList = notifyTemplateService.selectList(new NotifyTemplate());//		if(notifyTemplateList!=null && notifyTemplateList.size()>0){//			for(int i=0;i<){//				//			}//		}		request.setAttribute("notifyTemplateList", notifyTemplateList);		return page_toList;	}		/**	 * 修改模板	 * @throws IOException 	 */	//	public String updateTemplate() throws IOException{//		logger.error("updateTemplate...");//		logger.error("updateTemplate...e="+e.toString());//		if(empty(e.getCode()) || empty(e.getTemplate())){//			getResponse().getWriter().write("-1");//保存失败，参数不能为空！//		}else{//			getServer().update(getE());//			getResponse().getWriter().write("0");//保存成功//		}//		return null;//	}		@Override	public String update(HttpServletRequest request, NotifyTemplate e, RedirectAttributes flushAttrs) throws Exception {		logger.error("update...");		logger.error("update...e="+e.toString());		e.setTemplateCheckError(null);		if(empty(e.getCode()) || empty(e.getTemplate())){			throw new NullPointerException();		}		getService().update(e);				//验证模板是否可用		if(NotifyTemplate.email_reg.equals(e.getCode())){			Map data = new HashMap();  			data.put("nickname", "测试");			data.put("system", "jeeshop");			data.put("url", "http://www.baidu.com");			data.put("servicesPhone", "400-666-8888");			data.put("systemEmail", "jeeshop@jeeshop.net");			data.put("helpUrl", "http://www.baidu.com");			try {				FreemarkerTemplateUtil.freemarkerProcess(data,e.getTemplate());			} catch (Exception e1) {				e1.printStackTrace();				e.setTemplateCheckError("模板验证未通过！请检查！");			}		}		addMessage(flushAttrs, "更新成功！");		return "redirect:selectList";	}		/**	 * 根据code查询指定的模板内容-ajax	 * @return	 * @throws IOException	 */	@RequestMapping("selectTemplateByCode")	@ResponseBody	public NotifyTemplate selectTemplateByCode(NotifyTemplate e) throws IOException{		if(empty(e.getCode())){			throw new NullPointerException("code不能为空！");		}				NotifyTemplate ee = new NotifyTemplate();		ee.setCode(e.getCode());		ee = notifyTemplateService.selectOne(ee);		String json = JSON.toJSONString(ee);		logger.error("selectTemplateByCode.jspn = " + json);		return ee;	}}